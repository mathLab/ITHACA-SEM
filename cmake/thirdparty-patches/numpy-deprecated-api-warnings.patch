--- CMakeLists.txt	2019-10-07 12:58:21.000000000 +0100
+++ CMakeLists.txt	2020-06-01 13:49:08.000000000 +0100
@@ -144,6 +144,9 @@
 # compiler definitions for non-windows builds
 if (NOT WIN32)
   add_definitions(-fPIC)
+  if (APPLE)
+    add_definitions(-DNPY_NO_DEPRECATED_API=NPY_1_7_API_VERSION)
+  endif()
 endif()
 
 if (BUILD_TESTS)
--- libs/numpy/src/ndarray.cpp	2020-06-01 13:51:55.000000000 +0100
+++ libs/numpy/src/ndarray.cpp	2020-06-01 13:52:17.000000000 +0100
@@ -25,20 +25,20 @@
 ndarray::bitflag numpy_to_bitflag(int const f)
 {
   ndarray::bitflag r = ndarray::NONE;
-  if (f & NPY_C_CONTIGUOUS) r = (r | ndarray::C_CONTIGUOUS);
-  if (f & NPY_F_CONTIGUOUS) r = (r | ndarray::F_CONTIGUOUS);
-  if (f & NPY_ALIGNED) r = (r | ndarray::ALIGNED);
-  if (f & NPY_WRITEABLE) r = (r | ndarray::WRITEABLE);
+  if (f & NPY_ARRAY_C_CONTIGUOUS) r = (r | ndarray::C_CONTIGUOUS);
+  if (f & NPY_ARRAY_F_CONTIGUOUS) r = (r | ndarray::F_CONTIGUOUS);
+  if (f & NPY_ARRAY_ALIGNED) r = (r | ndarray::ALIGNED);
+  if (f & NPY_ARRAY_WRITEABLE) r = (r | ndarray::WRITEABLE);
   return r;
 }
 
 int bitflag_to_numpy(ndarray::bitflag f)
 {
   int r = 0;
-  if (f & ndarray::C_CONTIGUOUS) r |= NPY_C_CONTIGUOUS;
-  if (f & ndarray::F_CONTIGUOUS) r |= NPY_F_CONTIGUOUS;
-  if (f & ndarray::ALIGNED) r |= NPY_ALIGNED;
-  if (f & ndarray::WRITEABLE) r |= NPY_WRITEABLE;
+  if (f & ndarray::C_CONTIGUOUS) r |= NPY_ARRAY_C_CONTIGUOUS;
+  if (f & ndarray::F_CONTIGUOUS) r |= NPY_ARRAY_F_CONTIGUOUS;
+  if (f & ndarray::ALIGNED) r |= NPY_ARRAY_ALIGNED;
+  if (f & ndarray::WRITEABLE) r |= NPY_ARRAY_WRITEABLE;
   return r;
 }
 
@@ -122,10 +122,10 @@
   }
   int itemsize = dt.get_itemsize();
   int flags = 0;
-  if (writeable) flags |= NPY_WRITEABLE;
-  if (is_c_contiguous(shape, strides, itemsize)) flags |= NPY_C_CONTIGUOUS;
-  if (is_f_contiguous(shape, strides, itemsize)) flags |= NPY_F_CONTIGUOUS;
-  if (is_aligned(strides, itemsize)) flags |= NPY_ALIGNED;
+  if (writeable) flags |= NPY_ARRAY_WRITEABLE;
+  if (is_c_contiguous(shape, strides, itemsize)) flags |= NPY_ARRAY_C_CONTIGUOUS;
+  if (is_f_contiguous(shape, strides, itemsize)) flags |= NPY_ARRAY_F_CONTIGUOUS;
+  if (is_aligned(strides, itemsize)) flags |= NPY_ARRAY_ALIGNED;
   ndarray r(python::detail::new_reference
     (PyArray_NewFromDescr(&PyArray_Type,
 			  incref_dtype(dt),
@@ -246,13 +246,13 @@
 ndarray array(python::object const & obj) 
 {
   return ndarray(python::detail::new_reference
-    (PyArray_FromAny(obj.ptr(), NULL, 0, 0, NPY_ENSUREARRAY, NULL)));
+    (PyArray_FromAny(obj.ptr(), NULL, 0, 0, NPY_ARRAY_ENSUREARRAY, NULL)));
 }
 
 ndarray array(python::object const & obj, dtype const & dt) 
 {
   return ndarray(python::detail::new_reference
-    (PyArray_FromAny(obj.ptr(), detail::incref_dtype(dt), 0, 0, NPY_ENSUREARRAY, NULL)));
+    (PyArray_FromAny(obj.ptr(), detail::incref_dtype(dt), 0, 0, NPY_ARRAY_ENSUREARRAY, NULL)));
 }
 
 ndarray from_object(python::object const & obj, dtype const & dt, int nd_min, int nd_max, ndarray::bitflag flags)
